========================
README FOR FILE OPERATION
========================

Begin by opening the Program. From there click on "New Character" to create a character.

You must fill all fields before you can proceed. All fields have a tooltip to inform the user of the accepted parameter.
Additionally, all fields besides "Character Name" will only allow numbers to be entered, not letters or special characters.

Clicking the "Cancel" button will return the user to Start Screen.

Clicking the "Confirm" button will first validate that all fields are filled and that they are within the appropriate ranges.
If this validation fails, an error message will popup and inform the user of the issue.
If this validation passes, the Main Screen will be generated and filled with the entered values.

On the Main Screen, there are 4 tabs that can be selected.

Navigate to the "Inventory" and "Spellbook" tabs.
At this time, "Inventory" and "Spellbook" are not implemented.
Clicking on the edit buttons in their tabs will generate the appropriate edit windows, but all buttons on those windows other than "Cancel" will only generate a warning that the feature is not implemented.

Now Navigate back to the "Base Stats" tab.
On the "Base Stats" tab, click the "Edit Character" button. An edit window will be generated.
The text fields are populated with the values given by the user during character creation, as well as current HP, level, and XP. These values are always set to default values at new character creation.
Tooltips are also generated to inform the user of the accepted range of values for each field

-Clicking the "Cancel" button will ignore any changes the user made and close the edit window.
-Clicking the "Edit" button will first validate input.
If validation passes, the values pass into the program, changes the appropriate variable to the accepted values, and then updates the Main Screen with those values.
If validation fails, an error window is generated informing the user of the issue.

Once you have either successfully edited your character or closed the window, move to the "Skills" tab.
Now click the "Skill Proficiency" button. A new window will generate that will allow the user to indicate whether the character is proficient in that skill.

This window has the skills, a checkbox to indicate proficiency, and a text field with the current level of each skill.
The text fields are not editable by the user.
You can now activate as many checkboxes as you wish, with check granting a bonus to the level of the corresponding skill.

Once you are done, you can click the "Edit" button to confirm the changes and return to the Main Screen with the appropriate skills update to their new values.

In the Main Screen, now click on the "File" button in the top menu and select "Save Character".
This opens a file chooser that takes you to the base user directory. From here, you can navigate to your preferred directory or simply save your character in the base directory.
Once completed, a window will appear informing the user that the save was successful.

Now select "New Character" from the Menu. A warning should popup to inform the user that they will lose any unsaved data if they continue.
Click "Continue". The Main Screen will now be disposed of and the New Character dialog will open.
Proceed with new character creation.

Once you are in the Main Screen with the new character, go to the File menu and click "Load Character".
You should recieve another warning about unsaved data. Click "Continue" and navigate to your saved character file.

**PLEASE NOTE**
This program can ONLY read .json files that it has created. Any other .json files will potentially produce errors.
***************

Once you have selected your saved character file, open it. The Main Screen should now show the data from the saved character.

Now, click the "Quit/Start Screen" button in the File menu. The Main Screen should close and the Start Screen should be generated.

You can now test the "Load Character" button using the same method as above. Note that accessing .json files not generated by the program will produce errors.

This completes the demo.





